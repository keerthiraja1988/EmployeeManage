using CrossCutting.Caching;
using CrossCutting.Logging;
using DomainModel;
using DomainModel.Shared;
using Insight.Database;
using Repository;
using ServiceInterface;
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Data.SqlClient;
using System.Linq;

namespace ServiceConcrete
{
    [NLogging]
    public class UserAccountService : IUserAccountService
    {
        private readonly IUserAccountRepository _iUserAccountRepository;
        private readonly ISecurityService _iSecurityService;

        public UserAccountService(DbConnection parameter, ISecurityService iSecurityService)
        {
            SqlInsightDbProvider.RegisterProvider();
            string sqlConnection = Caching.Instance.GetApplicationConfigs("DBConnection");
            DbConnection c = new SqlConnection(sqlConnection);
            _iUserAccountRepository = c.As<IUserAccountRepository>();

            _iSecurityService = iSecurityService;
        }

        //~UserAccountService() // destructor define
        //{
        //    this._IUserAccountRepository?.Dispose();
        //}

        public int GetTestValue()
        {
            return this._iUserAccountRepository.GetTestValue();
        }

        public bool RegisterNewUser(UserAccountModel userAccountModel)
        {
            userAccountModel = _iSecurityService.GenerateHashAndSaltForPassword(userAccountModel);

            return this._iUserAccountRepository.RegisterNewUser(userAccountModel);
        }

        public (UserAccountModel UserAccount, List<UserRolesModel> UserRoles) ValidateUserLogin(UserAccountModel userAccountModel)
        {
            return _iSecurityService.ValidateUserLoginAndCredential(userAccountModel);
        }

        public UserAccountModel GetAutoGeneratedUserData()
        {
            UserAccountModel userAccountModel = new UserAccountModel
            {
                UserName = Faker.User.Username(),
                FirstName = Faker.Name.FirstName(),
                LastName = Faker.Name.LastName(),
                Email = Faker.User.Email(),
                Password = Faker.User.Password()
            };

            return userAccountModel;
        }

        public (IpPropertiesModal LastSessionDetails, IpPropertiesModal CurrentSessionDetails) GetUserDetailsForLastLogin(UserAccountModel userAccountModel)
        {
            var resultSet = this._iUserAccountRepository.GetUserDetailsForLastLogin(userAccountModel);
            IpPropertiesModal lastSessionDetails = new IpPropertiesModal();
            lastSessionDetails = resultSet.Set1.FirstOrDefault();
            IpPropertiesModal currentSessionDetails = resultSet.Set2.FirstOrDefault();

            return (lastSessionDetails, currentSessionDetails);
        }
    }
}