<script>

</script>
@model WebAppCore.Areas.DashBoard.Models.DashBoardWidgetsDTO

@{
    ViewData["Title"] = "DashBoard";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<div class="row pl-2" id="divDashBoardRow1WidgetsHolder">
    @await Html.PartialAsync("_DashBoardRow1Widgets", Model.DashBoardRow1WidgetsViewModel)
</div>

<div class="row pl-2 pt-0" id="divChartsRow2WidgetsHolderMain">


    <div class="col-12 col-sm-12 col-md-12 col-lg-6 col-xl-6 pr-0 pl-0 pt-2
      order-last      order-sm-last order-md-last order-lg-first order-xl-first" >
        <div class="demo-section k-content wide mr-2"   style=" box-shadow: 0px 4px 7px 0.7px rgba(119, 119, 119, 0.76);">
            @(Html.Kendo().Chart().Name("chart")

                                     .Theme("sass")
                                     .Title("Employee Statistics")
                                     .Legend(legend => legend
                                         .Position(ChartLegendPosition.Bottom)
                                     )
                                     .ChartArea(chartArea => chartArea
                                         .Background("transparent")
                                     )
                                     .SeriesDefaults(seriesDefaults =>
                                         seriesDefaults.Area().Line(line => line.Style(ChartSeriesLineStyle.Smooth))
                                     )
                                     .Series(series =>
                                     {
                                         series.Area(new double[] { 80, 70, 37, 10, 45 }).Name("New Employees");
                                         series.Area(new double[] { 20, 23, 50, 25, 17 }).Name("Leavers");
                                     })
                                     .CategoryAxis(axis => axis
                                         .Categories("3 Oct", "4 Oct", "5 Oct", "6 Oct", "7 Oct")
                                         .MajorGridLines(lines => lines.Visible(false))
                                     )
                                     .ValueAxis(axis => axis
                                         .Numeric()
                                         .Labels(labels => labels.Format("{0}"))
                                         .AxisCrossingValue(-10)
                                         .Line(line => line.Visible(false))
                                     )
                                     .Tooltip(tooltip => tooltip
                                         .Visible(true)
                                         .Format("{0}")
                                         .Template("#= series.name #: #= value #")
                                     )
            )
        </div>

    </div>

    <div class="col-12 col-sm-12 col-md-6 col-lg-3 col-xl-3 pl-0 pr-2 pt-2"
        >
        <div class="demo-section k-content wide mr-2"   style=" box-shadow: 0px 4px 7px 0.7px rgba(119, 119, 119, 0.76);">
            <div class="demo-section k-content wide">
                @(Html.Kendo().Chart().Name("chart33")
                                 .Theme("sass")
                             .Title("Site Visitors Stats")
                             .Legend(legend => legend
                                 .Position(ChartLegendPosition.Bottom)
                             )
                             .SeriesDefaults(seriesDefaults => seriesDefaults
                                 .Column().Stack(true)
                             )
                             .Series(series =>
                             {
                                 series.Column(new double[] { 56000, 63000, 74000, 91000, 117000, 138000 }).Name("Total Visits");
                                 series.Column(new double[] { 52000, 34000, 23000, 48000, 67000, 83000 }).Name("Unique visitors");
                             })
                             .CategoryAxis(axis => axis
                                 .Categories("Jan", "Feb", "Mar", "Apr", "May", "Jun")
                                 .MajorGridLines(lines => lines.Visible(false))
                             )
                             .ValueAxis(axis => axis
                                 .Numeric()
                                 .Line(line => line.Visible(false))
                             )
                             .Tooltip(tooltip => tooltip
                                 .Visible(true)
                                 .Format("{0}")
                             )
                )
            </div>
        </div>

    </div>
    <div class="col-12 col-sm-12 col-md-6 col-lg-3 col-xl-3 pl-0 pr-2 mt-2 pb-2
         order-md-first order-sm-first order-first  order-lg-last order-xl-last">

        <div class="card text-white pl-0 pr-0 pt-0 pb-0 mt-2"
             style=" box-shadow: 0px 4px 7px -1px #777; background-color: #0275d8;">
            <div class="card-header pb-2" style="padding-bottom: 3px; padding-top: 3px;">
                <div class="row ">
                    <i style="font-size: 15px;" class="fas fa-map-marker-alt mr-2 mt-1"></i>
                    <p class="lead mb-0">
                        @Model.DashBoardRow2WidgetsViewModel.WeatherWidgetsViewModel.CurrentCityName
                    </p>
                    <p class="lead mb-0 ml-2 ">
                        <small style="font-size:12px">
                            @Model.DashBoardRow2WidgetsViewModel.WeatherWidgetsViewModel.CurrentCountryName
                    </small>
                    </p>
                </div>



                <div class="card-body pb-0 pt-0 pr-0 pl-0 mt-2">
                    <div class="row pb-0 pt-0 pr-0 pl-0">
                        <div class="col-6 col-sm-6 col-md-6 col-lg-5 col-xl-5 pl-1 pr-0 pt-0 pb-0
                             mb-1  d-flex justify-content-center">
                            <canvas id="weatherIcon" width="100" height="100"></canvas>
                        </div>
                        <div class="col-6 col-sm-6 col-md-6 col-lg-7 col-xl-7 pl-1 pr-0 pt-0 pb-0
                                "
                             style="color:white">
                            <div class="row">
                                <div class="col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12
                                          d-flex justify-content-center">
                                    <h1 class="display-4 ml-2">
                                        @Model.DashBoardRow2WidgetsViewModel.WeatherWidgetsViewModel.Temperature
                                    </h1>
                                </div>

                            </div>
                            <div class="row">
                                <div class="col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12
                                         d-flex justify-content-center">
                                    <p>
                                        @Html.HiddenFor(m => m.DashBoardRow2WidgetsViewModel
                                                            .WeatherWidgetsViewModel.WeatherConditionIcon
                                                           , new { id = "hdnWeatherConditionIcon" })
                                        @Model.DashBoardRow2WidgetsViewModel.WeatherWidgetsViewModel.WeatherCondition
                                    </p>
                                </div>

                            </div>

                        </div>
                    </div>
                    <div class="row  pl-1 pr-0 mt-1" style="    font-size: 12px;">
                        <div class="col-6  d-flex justify-content-center pl-1 pr-0">
                            Wind :
                            @Model.DashBoardRow2WidgetsViewModel.WeatherWidgetsViewModel.WindSpeed
                            Km/h
                            <i class="fas fa-wind ml-2"></i>
                        </div>
                        <div class="col-6  d-flex justify-content-center  pl-3 pr-0">
                            Humidity :
                            @Model.DashBoardRow2WidgetsViewModel.WeatherWidgetsViewModel.Humidity %

                            <i class="fas fa-tint ml-2"></i>
                        </div>
                    </div>
                </div>

            </div>
        </div>

        <div class="card text-white pl-0 pr-0 pt-0 pb-0 mt-3"
             style=" box-shadow: 0px 4px 7px 0.7px rgba(119, 119, 119, 0.76);">

            <script>
                $(document).ready(function () {
                    var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
                    var dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
                    var newDate = new Date();
                    newDate.setDate(newDate.getDate());
                    $('#Date').html(dayNames[newDate.getDay()] + " " + newDate.getDate() + ' ' + monthNames[newDate.getMonth()] + ' ' + newDate.getFullYear());
                    setInterval(function () {
                        var seconds = new Date().getSeconds();
                        $("#sec").html((seconds < 10 ? "0" : "") + seconds);
                    }, 1000);
                    setInterval(function () {
                        var minutes = new Date().getMinutes();
                        $("#min").html((minutes < 10 ? "0" : "") + minutes);
                    }, 1000);
                    setInterval(function () {
                        var hours = new Date().getHours();
                        $("#hours").html((hours < 10 ? "0" : "") + hours);
                    }, 1000);

                    $('#myclock').thooClock({
                        dialColor: '#222',
                        secondHandColor: '#C00',
                        size: 300,
                        showNumerals: false,
                        brandText: '',
                        brandText2: ''
                    });

                });
            </script>
            <div class="card-header  pb-1" style="padding-bottom: 3px; padding-top: 3px;
                                background-color: rgba(28, 26, 104, 0.02);">
                <div class="row">
                    <div class="col-6 col-sm-6 col-md-6 col-lg-6 col-xl-6 pl-0 pr-0 pt-0 pb-0">
                        <div id="myclock"></div>
                    </div>

                    <div class="col-6 col-sm-6 col-md-6 col-lg-6 col-xl-6 pl-0 pr-0 pt-0 pb-0
                       text-center d-flex align-items-center lead"
                         style="color:black">
                        <div class="row pl-0 pr-0 pt-0 pb-0">
                            <div class="col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 pl-0 pr-0 pt-0 pb-0"
                                 style="font-size: 26px; font-weight: bolder;">

                                <span id="hours"></span>
                                <span id="point">:</span>
                                <span id="min"></span>
                                <span id="point">:</span>
                                <span id="sec"></span>
                            </div>

                            <div class="col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 mt-2"
                                 style="font-size: 18px; ">

                                @DateTime.Now.DayOfWeek

                            </div>

                            <div class="col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12"
                                 style="font-size: 16px; ">
                                @DateTime.Now.ToString("MMMM")
                                @DateTime.Now.Day
                                @DateTime.Now.Year


                            </div>


                        </div>


                    </div>

                </div>

            </div>

        </div>


    </div>



</div>




<div class="row  pl-2 pt-4" id="divChartsRow2WidgetsHolderMain">

    <div class="col-12 col-sm-12 col-md-12 col-lg-6 col-xl-6 pl-0 pr-0">
        <div class="demo-section k-content wide">
            @(Html.Kendo().Chart().Name("chart1")

                        .Theme("sass")
                       .Title("Gross employee growth statistics")
                       .Legend(legend => legend
                           .Position(ChartLegendPosition.Bottom)
                       )
                       .ChartArea(chartArea => chartArea
                           .Background("transparent")
                       )
                       .SeriesDefaults(seriesDefaults =>
                           seriesDefaults.Line().Style(ChartLineStyle.Smooth)
                       )
                       .Series(series =>
                       {
                           series.Line(new double[] { 3.907, 7.943, 7.848, 9.284, 9.263, 9.801, 3.890, 8.238, 9.552, 6.855 }).Name("India");
                           series.Line(new double[] { 1.988, 2.733, 3.994, 3.464, 4.001, 3.939, 1.333, -2.245, 4.339, 2.727 }).Name("World");
                           series.Line(new double[] { 4.743, 7.295, 7.175, 6.376, 8.153, 8.535, 5.247, -7.832, 4.3, 4.3 }).Name("Russian Federation");
                           series.Line(new double[] { -0.253, 0.362, -3.519, 1.799, 2.252, 3.343, 0.843, 2.877, -5.416, 5.590 }).Name("Haiti");
                       })
                       .CategoryAxis(axis => axis
                           .Categories("2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011")
                           .MajorGridLines(lines => lines.Visible(false))
                       )
                       .ValueAxis(axis => axis
                           .Numeric().Labels(labels => labels.Format("{0}%"))
                           .Line(line => line.Visible(false))
                           .AxisCrossingValue(-10)
                       )
                       .Tooltip(tooltip => tooltip
                           .Visible(true)
                           .Format("{0}%")
                       )
            )
        </div>

    </div>
</div>

<script>
    var skycons = new Skycons({ "color": "white" }, { "resizeClear": true });
    // on Android, a nasty hack is needed: {"resizeClear": true}


    if ($('#hdnWeatherConditionIcon').val() == 'CLEAR_DAY') {
        skycons.add(document.getElementById("weatherIcon"), Skycons.CLEAR_DAY);

    }
    else if ($('#hdnWeatherConditionIcon').val() == 'CLEAR_NIGHT') {
        skycons.add(document.getElementById("weatherIcon"), Skycons.CLEAR_NIGHT);

    }
    else if ($('#hdnWeatherConditionIcon').val() == 'PARTLY_CLOUDY_DAY') {
        skycons.add(document.getElementById("weatherIcon"), Skycons.PARTLY_CLOUDY_DAY);

    }
    else if ($('#hdnWeatherConditionIcon').val() == 'PARTLY_CLOUDY_NIGHT') {
        skycons.add(document.getElementById("weatherIcon"), Skycons.PARTLY_CLOUDY_NIGHT);

    }
    else if ($('#hdnWeatherConditionIcon').val() == 'CLOUDY') {
        skycons.add(document.getElementById("weatherIcon"), Skycons.CLOUDY);

    }
    else if ($('#hdnWeatherConditionIcon').val() == 'RAIN') {
        skycons.add(document.getElementById("weatherIcon"), Skycons.RAIN);

    }
    else if ($('#hdnWeatherConditionIcon').val() == 'SLEET') {
        skycons.add(document.getElementById("weatherIcon"), Skycons.SLEET);

    }
    else if ($('#hdnWeatherConditionIcon').val() == 'SNOW') {
        skycons.add(document.getElementById("weatherIcon"), Skycons.SNOW);

    }
    else if ($('#hdnWeatherConditionIcon').val() == 'WIND') {
        skycons.add(document.getElementById("weatherIcon"), Skycons.WIND);

    }
    else if ($('#hdnWeatherConditionIcon').val() == 'FOG') {
        skycons.add(document.getElementById("weatherIcon"), Skycons.FOG);

    }

    // ...or by the canvas DOM element itself.

    // start animation!
    skycons.play();

</script>

<script>

    var EmployeeManageUrl = '@Url.Action("Index", "EmployeeManage", new { area = "EmployeeManage" })';
    var ApplicationErrorsUrl = '@Url.Action("Error", "Base", new { area = "Base" })';

    var AccessDeniedUrl = '@Url.Action("AccessDenied", "UserAccount", new { area = "Security" })';
    var dashBoardHubConnection = new signalR.HubConnectionBuilder().withUrl("/dashBoardHub").build();

    dashBoardHubConnection.on("rUpdateDashBoardRow1Widgets", function (message) {
        $("#divDashBoardRow1WidgetsHolder").html(message);

        var dashBoardRow1WidgetEmployeeDetailsAnimate = KUTE.fromTo('#divDashBoardRow1WidgetEmployeeDetails', { rotateX: 180 }, { rotateX: 0 }, { perspective: 600, duration: 1000, delay: 100 });
        var dashBoardRow1WidgetAppErrorsAnimate = KUTE.fromTo('#divDashBoardRow1WidgetAppErrors', { rotateX: 180 }, { rotateX: 0 }, { perspective: 600, duration: 500 });
        var dashBoardRow1WidgetServicesAnimate = KUTE.fromTo('#divDashBoardRow1WidgetServices', { rotateX: 180 }, { rotateX: 0 }, { perspective: 600, duration: 500 });
        var dashBoardRow1WidgetActiveUsersAnimate = KUTE.fromTo('#divDashBoardRow1WidgetActiveUsers', { rotateX: 180 }, { rotateX: 0 }, { perspective: 600, duration: 500 });

        dashBoardRow1WidgetEmployeeDetailsAnimate.chain(dashBoardRow1WidgetAppErrorsAnimate);
        dashBoardRow1WidgetAppErrorsAnimate.chain(dashBoardRow1WidgetServicesAnimate);
        dashBoardRow1WidgetServicesAnimate.chain(dashBoardRow1WidgetActiveUsersAnimate);

        dashBoardRow1WidgetEmployeeDetailsAnimate.start();
    });

    dashBoardHubConnection.start().catch(function (err) {
        return console.error(err.toString());
    });

    setTimeout(
        function () {
            dashBoardHubConnection.invoke("SendMessage", "vvvvv", "vdsvsdv").catch(function (err) {
                return console.error(err.toString());
            });
        }, 3000);

    jQuery(document).ready(function () {


        setTimeout(
            function () {
                var dashBoardRow1WidgetEmployeeDetailsAnimate = KUTE.fromTo('#divDashBoardRow1WidgetEmployeeDetails', { rotateX: 180 }, { rotateX: 0 }, { perspective: 600, duration: 1000, delay: 100 });
                var dashBoardRow1WidgetAppErrorsAnimate = KUTE.fromTo('#divDashBoardRow1WidgetAppErrors', { rotateX: 180 }, { rotateX: 0 }, { perspective: 600, duration: 500 });
                var dashBoardRow1WidgetServicesAnimate = KUTE.fromTo('#divDashBoardRow1WidgetServices', { rotateX: 180 }, { rotateX: 0 }, { perspective: 600, duration: 500 });
                var dashBoardRow1WidgetActiveUsersAnimate = KUTE.fromTo('#divDashBoardRow1WidgetActiveUsers', { rotateX: 180 }, { rotateX: 0 }, { perspective: 600, duration: 500 });

                dashBoardRow1WidgetEmployeeDetailsAnimate.chain(dashBoardRow1WidgetAppErrorsAnimate);
                dashBoardRow1WidgetAppErrorsAnimate.chain(dashBoardRow1WidgetServicesAnimate);
                dashBoardRow1WidgetServicesAnimate.chain(dashBoardRow1WidgetActiveUsersAnimate);

                dashBoardRow1WidgetEmployeeDetailsAnimate.start();
            }, 500);

    });

</script>


