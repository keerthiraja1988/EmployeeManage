
@model WebAppCore.Areas.DashBoard.Models.DashBoardWidgetsDTO

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";

}


<div class="row  pl-2" id="divDashBoardRow1WidgetsHolder">
    @await Html.PartialAsync("_DashBoardRow1Widgets", Model.DashBoardRow1WidgetsViewModel)
</div>


<div class="row  pl-2" id="divChartsRow2WidgetsHolderMain">
    <div class="col-12 col-sm-12 col-md-12 col-lg-6 col-xl-6 pl-0 pr-0">
        <div class="demo-section k-content wide">
            @(Html.Kendo().Chart()
                                                                .Name("chart")
                                                                .Theme("sass")
                                                                .Title("Employee Statistics")
                                                                .Legend(legend => legend
                                                                    .Position(ChartLegendPosition.Bottom)
                                                                )
                                                                .ChartArea(chartArea => chartArea
                                                                    .Background("transparent")
                                                                )
                                                                .SeriesDefaults(seriesDefaults =>
                                                                    seriesDefaults.Area().Line(line => line.Style(ChartSeriesLineStyle.Smooth))
                                                                )
                                                                .Series(series =>
                                                                {
                                                                    series.Area(new double[] { 80, 70, 37, 10, 45 }).Name("New Employees");
                                                                    series.Area(new double[] { 20, 23, 50, 25, 17 }).Name("Leavers");
                                                                })
                                                                .CategoryAxis(axis => axis
                                                                    .Categories("3 Oct", "4 Oct", "5 Oct", "6 Oct", "7 Oct")
                                                                    .MajorGridLines(lines => lines.Visible(false))
                                                                )
                                                                .ValueAxis(axis => axis
                                                                    .Numeric()
                                                                    .Labels(labels => labels.Format("{0}"))
                                                                    .AxisCrossingValue(-10)
                                                                    .Line(line => line.Visible(false))
                                                                )
                                                                .Tooltip(tooltip => tooltip
                                                                    .Visible(true)
                                                                    .Format("{0}")
                                                                    .Template("#= series.name #: #= value #")
                                                                )
            )
        </div>

    </div>
    <div class="col-12 col-sm-12 col-md-12 col-lg-6 col-xl-6 pl-0 pr-0">
        <div class="demo-section k-content wide">
            @(Html.Kendo().Chart()
                                                .Name("chart1")
                                                 .Theme("sass")
                                                .Title("Gross employee growth statistics")
                                                .Legend(legend => legend
                                                    .Position(ChartLegendPosition.Bottom)
                                                )
                                                .ChartArea(chartArea => chartArea
                                                    .Background("transparent")
                                                )
                                                .SeriesDefaults(seriesDefaults =>
                                                    seriesDefaults.Line().Style(ChartLineStyle.Smooth)
                                                )
                                                .Series(series =>
                                                {
                                                    series.Line(new double[] { 3.907, 7.943, 7.848, 9.284, 9.263, 9.801, 3.890, 8.238, 9.552, 6.855 }).Name("India");
                                                    series.Line(new double[] { 1.988, 2.733, 3.994, 3.464, 4.001, 3.939, 1.333, -2.245, 4.339, 2.727 }).Name("World");
                                                    series.Line(new double[] { 4.743, 7.295, 7.175, 6.376, 8.153, 8.535, 5.247, -7.832, 4.3, 4.3 }).Name("Russian Federation");
                                                    series.Line(new double[] { -0.253, 0.362, -3.519, 1.799, 2.252, 3.343, 0.843, 2.877, -5.416, 5.590 }).Name("Haiti");
                                                })
                                                .CategoryAxis(axis => axis
                                                    .Categories("2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011")
                                                    .MajorGridLines(lines => lines.Visible(false))
                                                )
                                                .ValueAxis(axis => axis
                                                    .Numeric().Labels(labels => labels.Format("{0}%"))
                                                    .Line(line => line.Visible(false))
                                                    .AxisCrossingValue(-10)
                                                )
                                                .Tooltip(tooltip => tooltip
                                                    .Visible(true)
                                                    .Format("{0}%")
                                                )
            )
        </div>

    </div>
</div>




<script>

    var EmployeeManageUrl = '@Url.Action("Index", "EmployeeManage", new { area = "EmployeeManage" })';
    var ApplicationErrorsUrl = '@Url.Action("Error", "Base", new { area = "Base" })';
    
    var AccessDeniedUrl = '@Url.Action("AccessDenied", "UserAccount", new { area = "Security" })';
    var dashBoardHubConnection = new signalR.HubConnectionBuilder().withUrl("/dashBoardHub").build();

    dashBoardHubConnection.on("rUpdateDashBoardRow1Widgets", function (message) {
        $("#divDashBoardRow1WidgetsHolder").html(message);

        var dashBoardRow1WidgetEmployeeDetailsAnimate = KUTE.fromTo('#divDashBoardRow1WidgetEmployeeDetails', { rotateX: 180 }, { rotateX: 0 }, { perspective: 600, duration: 1000, delay: 100 });
        var dashBoardRow1WidgetAppErrorsAnimate = KUTE.fromTo('#divDashBoardRow1WidgetAppErrors', { rotateX: 180 }, { rotateX: 0 }, { perspective: 600, duration: 500 });
        var dashBoardRow1WidgetServicesAnimate = KUTE.fromTo('#divDashBoardRow1WidgetServices', { rotateX: 180 }, { rotateX: 0 }, { perspective: 600, duration: 500 });
        var dashBoardRow1WidgetActiveUsersAnimate = KUTE.fromTo('#divDashBoardRow1WidgetActiveUsers', { rotateX: 180 }, { rotateX: 0 }, { perspective: 600, duration: 500 });

        dashBoardRow1WidgetEmployeeDetailsAnimate.chain(dashBoardRow1WidgetAppErrorsAnimate);
        dashBoardRow1WidgetAppErrorsAnimate.chain(dashBoardRow1WidgetServicesAnimate);
        dashBoardRow1WidgetServicesAnimate.chain(dashBoardRow1WidgetActiveUsersAnimate);

        dashBoardRow1WidgetEmployeeDetailsAnimate.start();
    });

    dashBoardHubConnection.start().catch(function (err) {
        return console.error(err.toString());
    });

    setTimeout(
        function () {
            dashBoardHubConnection.invoke("SendMessage", "vvvvv", "vdsvsdv").catch(function (err) {
                return console.error(err.toString());
            });
        }, 3000);

    jQuery(document).ready(function () {


        setTimeout(
            function () {
                var dashBoardRow1WidgetEmployeeDetailsAnimate = KUTE.fromTo('#divDashBoardRow1WidgetEmployeeDetails', { rotateX: 180 }, { rotateX: 0 }, { perspective: 600, duration: 1000, delay: 100 });
                var dashBoardRow1WidgetAppErrorsAnimate = KUTE.fromTo('#divDashBoardRow1WidgetAppErrors', { rotateX: 180 }, { rotateX: 0 }, { perspective: 600, duration: 500 });
                var dashBoardRow1WidgetServicesAnimate = KUTE.fromTo('#divDashBoardRow1WidgetServices', { rotateX: 180 }, { rotateX: 0 }, { perspective: 600, duration: 500 });
                var dashBoardRow1WidgetActiveUsersAnimate = KUTE.fromTo('#divDashBoardRow1WidgetActiveUsers', { rotateX: 180 }, { rotateX: 0 }, { perspective: 600, duration: 500 });

                dashBoardRow1WidgetEmployeeDetailsAnimate.chain(dashBoardRow1WidgetAppErrorsAnimate);
                dashBoardRow1WidgetAppErrorsAnimate.chain(dashBoardRow1WidgetServicesAnimate);
                dashBoardRow1WidgetServicesAnimate.chain(dashBoardRow1WidgetActiveUsersAnimate);

                dashBoardRow1WidgetEmployeeDetailsAnimate.start();
            }, 500);

    });

</script>
